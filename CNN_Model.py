# -*- coding: utf-8 -*-
"""final_cifar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ZxqsupO1-7sjfi0KvQG1fTPwulRw2yM
"""

#downloading the dataset
import matplotlib.pyplot as plt 
import numpy as np
import chainer
 

#basedir = './src/cnn/images'
l = [4,30,55,72,1,95,32,57,73,91]
l.sort()
l

#List of required image classes
CIFAR100_LABELS_LIST = {1:'aquarium fish', 4:'beaver', 30:'dolphin',
                        32:'flatfish', 55:'otter', 72:'seal', 95:'whale', 
                        57:'ray', 73:'shark', 91:'trout'}
          


#loading the dataest
train_cifar100, test_cifar100 = chainer.datasets.get_cifar100()
no_classes = 100

#re indexing
CIFAR100_LABELS_LIST = {1:'aquarium_fish', 4:'beaver',30: 'dolphin', 
                        32:'flatfish', 55:'otter', 57:'ray', 72:'seal',
                        73:'shark', 91:'trout', 95:'whale'}


#Selecting only required images from the loaded data set
train = []
test = []
for i in train_cifar100:
        #  i-th image data with size 32x32 and lable
        image, label_index = i
        image = image.transpose(1,2,0)
        image = np.resize(image,(64,64,3))
        if l.count(label_index)>0:
          y = (image, l.index(label_index))
          train.append(y)
for i in test_cifar100:
        #  i-th image data with size 32x32 and lable
        image, label_index = i
        image = image.transpose(1,2,0)
        image = np.resize(image,(64,64,3))
        if l.count(label_index)>0:
          y = (image, l.index(label_index))
          test.append(y)

#Converting train into x and y train
X = []
Y = []
for i in train:
  X.append(i[0])
  y = np.array([i[1]])
  Y.append(y)
x_train = np.array(X)
y_train = np.array(Y)

#uint8
#Converting train into x and y test
X = []
Y = []
for i in test:
  X.append(i[0])
  y = np.array([i[1]])
  Y.append(y)
x_test = np.array(X)
y_test = np.array(Y)

print(x_test.shape,x_train.shape)
print(y_train.shape,y_test.shape)
print(len(y_train))
print(len(y_test))

import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras.losses import categorical_crossentropy
import matplotlib.pyplot as plt

# Model configuration
batch_size = 128
no_classes = 10
img_width, img_height, img_num_channels = 64, 64, 3
loss_function = categorical_crossentropy
data_augmentation = True
no_epochs = 100
optimizer = keras.optimizers.RMSprop(lr=0.0001, decay=1e-6) #, momentum=0.9, nesterov=True
validation_split = 0.2
verbosity = 1

# Determine shape of the data
input_shape = (img_width, img_height, img_num_channels)

# Parse numbers as floats
x_train = x_train.astype('float32')  
x_test = x_test.astype('float32')

# Normalize data
x_train = x_train / 255
x_test = x_test / 255

# convert class labels to binary class labels
y_train = keras.utils.to_categorical(y_train, no_classes)
y_test = keras.utils.to_categorical(y_test, no_classes)
print(y_train.shape, y_test.shape)

# Create the model
model = Sequential()

model.add(Conv2D(48, (3, 3), strides=(1, 1), input_shape=input_shape)) #layer1
model.add(Activation("relu"))
model.add(MaxPooling2D((3, 3)))

# CONV -> RELU -> BN -> Flatten
model.add(Conv2D(96, (3, 3), strides=(1, 1)))   #layer2
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(192, (3, 3), strides=(1, 1)))    #layer3
model.add(Activation("relu"))
model.add(MaxPooling2D((2, 2)))

model.add(Conv2D(256, (3, 3), strides=(1, 1)))   #layer4
model.add(Activation("relu"))

model.add(BatchNormalization(axis=3))   
model.add(Flatten())
# Softmax
model.add(Dense(10, activation="softmax"))     #FC
model.summary()

# Compile the model
model.compile(loss=loss_function,
              optimizer=optimizer,
              metrics=['accuracy'])

if not data_augmentation:
    print('Not using data augmentation.')
    history = model.fit(x_train, y_train,
            batch_size = batch_size,
            epochs = no_epochs,
            verbose = verbosity,
            validation_split = validation_split,
            shuffle = True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        zca_epsilon=1e-06,  # epsilon for ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        # randomly shift images horizontally (fraction of total width)
        width_shift_range=0.1,
        # randomly shift images vertically (fraction of total height)
        height_shift_range=0.1,
        shear_range=0.,  # set range for random shear
        zoom_range=0.,  # set range for random zoom
        channel_shift_range=0.,  # set range for random channel shifts
        # set mode for filling points outside the input boundaries
        fill_mode='nearest',
        cval=0.,  # value used for fill_mode = "constant"
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False,  # randomly flip images
        # set rescaling factor (applied before any other transformation)
        rescale=None,
        # set function that will be applied on each input
        preprocessing_function=None,
        # image data format, either "channels_first" or "channels_last"
        data_format=None)
    datagen.fit(x_train)

    history = model.fit(x_train, y_train,
            batch_size = batch_size,
            epochs = no_epochs,
            verbose = verbosity,
            validation_split = validation_split,
            shuffle = True)

#Model evaluation
score = model.evaluate(x_test, y_test, verbose=1)
print(f'Test loss: {score[0]} / Test accuracy: {score[1]}')                          #0.5210000276565552/32

# Visualize history
# Plot history: Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Validation loss vs loss history')
plt.ylabel('Loss value')
plt.xlabel('No. epoch')
plt.legend(['train_loss', 'Val_loss'], loc='upper left')
plt.show()

# Plot history: Accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Validation accuracy history')
plt.ylabel('Accuracy value (%)')
plt.xlabel('No. epoch')
plt.legend(['train_acc', 'Val_acc'], loc='upper left')
plt.show()
print(sum(history.history['accuracy'])/len(history.history['accuracy']))

